{
  "openapi": "3.0.1",
  "info": {
    "title": "The Todolist API Backend built @ Bbc",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "Authorization": []
    }
  ],
  "paths": {
    "/tags": {
      "get": {
        "tags": [
          "tag-controller"
        ],
        "summary": "Find tags with a given name. If no name given, all tags are returned.",
        "operationId": "findTags",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Tag name to search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag(s) found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tag-controller"
        ],
        "summary": "Create a new tag",
        "operationId": "insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Tag was added successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the tag"
          }
        }
      }
    },
    "/items": {
      "get": {
        "tags": [
          "item-controller"
        ],
        "summary": "Find items with a given name and tag name. Only not blank inputs are considered, otherwise all items are returned.",
        "operationId": "findItems",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Item name to search, leave empty for all",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "query",
            "description": "Tag name to search, leave empty for all",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Items found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "item-controller"
        ],
        "summary": "Add a new item",
        "operationId": "insert_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Item was created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "There was a conflict while creating the item"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Create a new user",
        "operationId": "signUp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User was created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "User could not be created, username already in use"
          }
        },
        "security": []
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Receive a token for BEARER authorization",
        "operationId": "signIn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JwtResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": []
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": [
          "tag-controller"
        ],
        "summary": "Get a tag",
        "operationId": "findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of tag to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "delete": {
        "tags": [
          "tag-controller"
        ],
        "summary": "Delete a tag",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of tag to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tag was deleted successfully"
          },
          "404": {
            "description": "Tag could not be deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "tag-controller"
        ],
        "summary": "Update a tag",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of tag to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Tag was not found"
          },
          "409": {
            "description": "There was a conflict while updating the tag"
          },
          "200": {
            "description": "Tag was updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{id}": {
      "get": {
        "tags": [
          "person-controller"
        ],
        "summary": "Get a person",
        "operationId": "findById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of person to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Person was not found"
          }
        }
      },
      "delete": {
        "tags": [
          "person-controller"
        ],
        "summary": "Delete a person",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of person to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Person could not be deleted"
          },
          "204": {
            "description": "Person was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "person-controller"
        ],
        "summary": "Update a person",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "There was a conflict while updating the person"
          },
          "404": {
            "description": "Person was not found"
          },
          "200": {
            "description": "Person was updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "tags": [
          "item-controller"
        ],
        "summary": "Get an item",
        "operationId": "findById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of item to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "delete": {
        "tags": [
          "item-controller"
        ],
        "summary": "Delete an item",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of item to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Item could not be deleted"
          },
          "204": {
            "description": "Item was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "item-controller"
        ],
        "summary": "Update an item",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of item to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "There was a conflict while updating the item"
          },
          "404": {
            "description": "Item not found"
          },
          "200": {
            "description": "Item was updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/persons": {
      "get": {
        "tags": [
          "person-controller"
        ],
        "summary": "Get all persons.",
        "operationId": "findAll",
        "responses": {
          "200": {
            "description": "Persons found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TagRequestDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "description": "The tag to update"
      },
      "TagResponseDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ItemRequestDTO": {
        "required": [
          "name",
          "personId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "personId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "doneAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The item to update"
      },
      "ItemResponseDTO": {
        "required": [
          "name",
          "personId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "personId": {
            "type": "integer",
            "format": "int32"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "doneAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "tagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "AuthRequestDTO": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "AuthResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "JwtResponseDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          }
        }
      },
      "PersonRequestDTO": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "description": "The person to update"
      },
      "PersonResponseDTO": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}